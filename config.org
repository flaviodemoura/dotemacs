#+TITLE: Emacs Configuration
#+AUTHOR: Flávio L. C. de Moura
#+EMAIL: flavio@flaviomoura.info
#+TOC: true
#+DATE: [2018-03-30 Sex 20:44]
#+last_modified: [2021-10-08 sex 18:13]

This is my emacs configuration. Adapted from https://github.com/jamiecollinson/dotfiles

* Setup

** Personal data

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Flávio L. C. de Moura")
  (setq user-mail-address "contato@flaviomoura.mat.br")
#+END_SRC 

** Cedilla in Emacs

Did not work:

(bind-key "' c" (lambda () (insert-char #o347)))

(global-set-key (kbd "<dead-acute> c") (lambda () (interactive) (insert-string "ç")))

(global-set-key (kbd "<dead-acute> c") (lambda () (interactive) (insert-char #o347)))

** Try
   
   # #+begin_src emacs-lisp
   # (use-package try
   # :ensure t)
   # #+end_src
   
** Theme

# #+BEGIN_SRC emacs-lisp
#   (use-package modus-vivendi-theme
#      :ensure t
#      :config
#       (load-theme 'modus-vivendi t))
#     (use-package modus-operandi-theme
#      :ensure t
#      :config
#       (load-theme 'modus-operandi t))
#     (use-package vscode-dark-plus-theme
#      :ensure t
#      :config
#       (load-theme 'vscode-dark-plus t))
# #+END_SRC 

** Auto fill mode

 #+BEGIN_SRC emacs-lisp
   (auto-fill-mode)
 #+END_SRC 

** bbdb

 #+BEGIN_SRC emacs-lisp
 (use-package bbdb
 :ensure t
 :config
   (setq bbdb-file "~/pCloudDrive/bbdb"))
 #+END_SRC 
 
** Flyspell 

 #+BEGIN_SRC emacs-lisp
   (setq ispell-program-name "/usr/bin/aspell")
   (setq ispell-dictionary "pt_BR")
   (setq ispell-list-command "--list")
   (add-hook 'org-mode-hook 'turn-on-flyspell)
   (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
   (autoload 'flyspell-delay-command "flyspell" "Delay on command." t) 
   (autoload 'tex-mode-flyspell-verify "flyspell" "" t) 
 #+END_SRC 
 
** Dired

 # #+BEGIN_SRC emacs-lisp
 #   (use-package dired
 #     :ensure t
 #     :config 
 #     (eval-after-load "dired"
 #       '(progn
 #          (define-key dired-mode-map (kbd "z")
 #            (lambda () (interactive)
 #              (let ((fn (dired-get-file-for-visit)))
 #                (start-process "default-app" nil "open" fn)))))))
 # #+END_SRC 

** scimax

Trying scimax

# #+BEGIN_SRC emacs-lisp
# (load "~/workspace-git/scimax/init.el")
# #+END_SRC 

* Preferences

 As of Emacs 26.1 (C-h N : view-emacs-news shows the recent changes), the default-major-mode variable was removed. This variable occurs in 2 places in emacs/emacs-src/pvs-ilisp.el. Because of this, PVS displays the following error

 error in process filter: Symbol's value as variable is void: default-major-mode

 To fix this error, add

 #+BEGIN_SRC emacs-lisp
   (defvar default-major-mode nil)
 #+END_SRC 

 Smooth scroll and keep cursor at same position when scrolling

 #+BEGIN_SRC emacs-lisp
   (setq scroll-step 1)
   (setq scroll-preserve-screen-position 1)
 #+END_SRC 

 Increase and decrease font size

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-=") 'text-scale-increase)
   (global-set-key (kbd "M--") 'text-scale-decrease)
 #+END_SRC 

 Don't display the help screen on startup.

 # #+BEGIN_SRC emacs-lisp
 #   (setq inhibit-startup-screen t)
 #+END_SRC 

 On  I use ⌘ as =meta= and prefer ⌥ to do nothing so I can still insert special characters like easily.

 # #+BEGIN_SRC emacs-lisp
 #   (setq mac-command-modifier 'meta
 #         mac-option-modifier 'none)
 # #+END_SRC 

 I prefer lines to wrap.

 #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
 #+END_SRC 

 Let's turn off unwanted window decoration.

 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
 #+END_SRC 

 I don't want the error bell.

 #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
 #+END_SRC 

* Coding
** Programming specific interface improvements

 When programming I like my editor to try to help me with keeping parentheses balanced.

 # #+BEGIN_SRC emacs-lisp
 #   (use-package smartparens
 #     :ensure t
 #     :diminish smartparens-mode
 #     :config
 #     (add-hook 'prog-mode-hook 'smartparens-mode))
 # #+END_SRC 

 Show parentheses matching

 #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
 #+END_SRC 

 Highlight current line

 #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode 1)
   (global-set-key (kbd "C-c h") 'global-hl-line-mode)
 #+END_SRC 

 Expand parentheses for me.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'electric-pair-mode)
 #+END_SRC 

** Git

 Magit is an awesome interface to git. Summon it with `C-x g`.

 #+BEGIN_SRC emacs-lisp
               (use-package magit
                 :ensure t
                 :bind ("C-x g" . magit-status)
                 :config
                 (setq magit-repository-directories '(("~/.emacs.d" . 0)
                                                      ("~/workspace/" . 2))))

               (use-package forge
                 :ensure t)
 #+END_SRC 

 Display line changes in gutter based on git history. Enable it everywhere.

 #+BEGIN_SRC emacs-lisp
   (use-package git-gutter
     :ensure t
     :config
     (global-git-gutter-mode 't)
     :diminish git-gutter-mode)
 #+END_SRC 

 TimeMachine lets us step through the history of a file as recorded in git.

 #+BEGIN_SRC emacs-lisp
   (use-package git-timemachine
     :ensure t)
 #+END_SRC 

** Coq

Open .v files with Proof General's Coq mode

#+BEGIN_SRC emacs-lisp
 (use-package proof-general
  :ensure t
  :config
   (eval-after-load "proof-script" '(progn
   (define-key proof-mode-map [(C-down)] 
   'proof-assert-next-command-interactive)
   (define-key proof-mode-map [(C-up)] 
   'proof-undo-last-successful-command))))
   (setq pg-hide-all-proofs t)
#+END_SRC 

# #+BEGIN_SRC emacs-lisp
#   (use-package company-coq
#       :ensure t
#       :hook (coq-mode . company-coq-mode))
# #+END_SRC 

** C

Emacs has a great built in C/C++ mode, but we can improve on it with =irony-mode= for code completion via =libclang=.

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :hook (c-mode . irony-mode))
#+END_SRC 

Add company mode support.

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC 

Add flycheck support.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC 

** Ido

 #+BEGIN_SRC emacs-lisp
   (use-package ido
     :ensure t
     :config
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode t)
     (setq ido-use-filename-at-point 'guess)
     (setq ido-create-new-buffer 'always)
     (setq ido-file-extensions-order '(".org" ".tex" ".pdf")))
    #+END_SRC 

* Extras
** Pdf tools

# #+BEGIN_SRC emacs-lisp
#    (use-package pdf-tools
#     :ensure t
#     :config
#     (pdf-tools-install))
# #+END_SRC

** Ace window

   #+begin_src emacs-lisp
   (use-package ace-window
   :ensure t
   :init
   (global-set-key [remap other-window] 'ace-window))
   #+end_src

** LaTeX classes

 #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'ox-latex
         (add-to-list 'org-latex-classes
                      '("entcs"
                        "\\documentclass[9pt]{entcs}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
         (add-to-list 'org-latex-classes
                   '("myreport"
                     "\\documentclass[11pt]{report}"
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC 

** AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-PDF-mode t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
  (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
	'(("PDF Viewer" "okular --unique %o#src:%n%b")))

  (custom-set-variables
   '(TeX-source-correlate-method 'synctex)
   '(TeX-source-correlate-mode t)
   '(TeX-source-correlate-start-server t))

  ;; (require 'auctex-latexmk)
  ;; (auctex-latexmk-setup)
  ;; (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  ;; (setq TeX-file-line-error nil)
#+END_SRC 

** BibTeX

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :ensure nil
  :config
  (progn
    (setq bibtex-dialect 'biblatex
          bibtex-align-at-equal-sign t
          bibtex-text-indentation 20
          bibtex-completion-bibliography '("~/workspace/org/zotLib.bib"))))
#+END_SRC 

** RefTeX

# #+BEGIN_SRC emacs-lisp
#   (use-package reftex
#     :ensure t
#     :config
#     (setq reftex-plug-into-AUCTeX t)
#     (setq reftex-use-fonts t)
#     (setq reftex-toc-split-windows-fraction 0.2)
#     (setq reftex-default-bibliography '("~/workspace/org/zotLib.bib"))
#     (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
# #+END_SRC 

* Org
** General settings.

I should comment on these more...

#+BEGIN_SRC emacs-lisp

 (defun zp/org-find-time-file-property (property &optional anywhere)
   "Return the position of the time file PROPERTY if it exists.
 When ANYWHERE is non-nil, search beyond the preamble."
   (save-excursion
     (goto-char (point-min))
     (let ((first-heading
            (save-excursion
              (re-search-forward org-outline-regexp-bol nil t))))
       (when (re-search-forward (format "^#\\+%s:" property)
                                (if anywhere nil first-heading)
                                t)
         (point)))))
  
 (defun zp/org-has-time-file-property-p (property &optional anywhere)
   "Return the position of time file PROPERTY if it is defined.
 As a special case, return -1 if the time file PROPERTY exists but
 is not defined."
   (when-let ((pos (zp/org-find-time-file-property property anywhere)))
     (save-excursion
       (goto-char pos)
       (if (and (looking-at-p " ")
                (progn (forward-char)
                       (org-at-timestamp-p 'lax)))
           pos
         -1))))
  
 (defun zp/org-set-time-file-property (property &optional anywhere pos)
   "Set the time file PROPERTY in the preamble.
 When ANYWHERE is non-nil, search beyond the preamble.
 If the position of the file PROPERTY has already been computed,
 it can be passed in POS."
   (when-let ((pos (or pos
                       (zp/org-find-time-file-property property))))
     (save-excursion
       (goto-char pos)
       (if (looking-at-p " ")
           (forward-char)
         (insert " "))
       (delete-region (point) (line-end-position))
       (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
         (insert now)))))
  
 (defun zp/org-set-last-modified ()
   "Update the LAST_MODIFIED file property in the preamble."
   (when (derived-mode-p 'org-mode)
     (zp/org-set-time-file-property "LAST_MODIFIED")))
  
    (setq org-html-htmlize-output-type 'css)
    (setq org-latex-pdf-process 
          '("%latex --synctex=1 -interaction nonstopmode -output-directory %o %f" 
            "%bibtex %b"
            "%latex --synctex=1 -interaction nonstopmode -output-directory %o %f"   
            "%latex --synctex=1 -interaction nonstopmode -output-directory %o %f"))
    (setq org-file-apps '((auto-mode . emacs)
                          ("\\.mm\\'" . default)
                          ("\\.x?html?\\'" . system)
                          ("\\.dvi\\'" . system)
                          ("\\.pdf\\'" . "/usr/bin/okular %s")))
    (setq org-startup-indented 'f)
    (setq org-directory "~/workspace/org/")
    (setq org-special-ctrl-a/e 't)
    (setq org-default-notes-file (concat org-directory "notes.org"))
    (setq org-src-fontify-natively 't)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-deadline-warning-days 90)
    (setq org-agenda-files (directory-files-recursively "~/pCloudDrive/orgroam" "\\.org$"))
    (setq org-todo-keywords
          '((type "TODO(t)" "PROGRESS(s@/!)" "WAITING(w@/!)" "READING(r)" "NEXT(n)" "|" "CANCELLED(c)" "DONE(d)" "READ(e)")))
    (setq org-agenda-custom-commands 
          '(("o" "No trabalho" tags-todo "@unb"
             ((org-agenda-overriding-header "UnB")))
            ("h" "Em casa" tags-todo "@casa"
             ((org-agenda-overriding-header "Casa")))))
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c b") 'org-iswitchb)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (setq org-publish-project-alist
          '(("lc1"
             :base-directory "~/workspace/LC1-github"
             :base-extension "org"
             :publishing-directory "~/workspace/flaviodemoura.github.io/"
             :publishing-function org-html-publish-to-html
             :headline-levels 3
             :section-numbers nil
             :with-toc nil
             :html-head "<link rel="stylesheet" type="text/css" href="files/site.css"/>"
             :html-preamble t)
    
            ("paa"
             :base-directory "~/workspace/PAA-github"
             :base-extension "org"
             :publishing-directory "~/workspace/flaviodemoura.github.io/"
             :publishing-function org-html-publish-to-html
             :headline-levels 3
             :section-numbers nil
             :with-toc nil
             :html-head "<link rel="stylesheet" type="text/css" href="files/site.css"/>"
             :html-preamble t)
    
            ("images"
             :base-directory "~/workspace/org/jpeg/"
             :base-extension "jpg\\|gif\\|png"
             :publishing-directory "~/workspace/flaviodemoura.github.io/files"
             :publishing-function org-publish-attachment)
    
            ("ensino" :components ("lc1" "paa" ))))
#+END_SRC 

    (setq org-agenda-files (directory-files-recursively "~/workspace/" "\\.org$"))

** Orgit

#+begin_src emacs-lisp
(use-package orgit
:ensure t)
#+end_src

** OrgRef

#+BEGIN_SRC emacs-lisp
    (use-package org-ref
      :ensure t
      :config
      (setq reftex-default-bibliography '("~/workspace/org/zotLib.bib")
            org-ref-default-bibliography '("~/workspace/org/zotLib.bib")
            org-ref-bibliography-notes "~/workspace/org/notes.org"
            org-ref-pdf-directory "~/pCloudDrive/pdfs/")
      (setq bibtex-completion-bibliography "~/workspace/org/zotLib.bib"
            bibtex-completion-library-path "~/pCloudDrive/pdfs"
            bibtex-completion-notes-path "~/workspace/org/")
      (setq bibtex-completion-pdf-open-function
            (lambda (fpath)
              (start-process "open" "*open*" "open" fpath))))
    (require 'doi-utils)
  (setq org-ref-latex-bib-resolve-func #'expand-file-name)
#+END_SRC 

** Org Roam

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/pCloudDrive/orgroam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+END_SRC

Old config:

    (use-package org-roam
      :ensure t
      :hook
      ((after-init . org-roam-mode)
       (before-save . zp/org-set-last-modified))
      :custom
      (org-roam-directory "~/workspace/org")
      :bind (:map org-roam-mode-map
                  (("C-c n l" . org-roam)
                   ("C-c n f" . org-roam-find-file)
                   ("C-c n j" . org-roam-jump-to-index)
                   ("C-c n b" . org-roam-switch-to-buffer)
                   ("C-c n g" . org-roam-graph))
                  :map org-mode-map
                  (("C-c n i" . org-roam-insert))))

    (setq org-roam-index-file "inicial.org")
    (add-hook 'after-init-hook 'org-roam-mode)
    (setq org-roam-graph-viewer "/usr/bin/open")
    (setq org-roam-capture-templates
          '(("d" "default" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "%<%Y%m%d%H%M%S>-${slug}"
             :head "#+TITLE: ${title}\n \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags ::  "
             :unnarrowed t)))
            
** Org Roam Bibtex
  
# #+BEGIN_SRC emacs-lisp
#   (use-package org-roam-bibtex
#     :ensure t
#     :after org-roam
#     :hook (org-roam-mode . org-roam-bibtex-mode)
#     :bind (:map org-mode-map
#                 (("C-c n a" . orb-note-actions))))
# #+END_SRC 

** Org Noter

# #+begin_src emacs-lisp
#    (use-package org-noter
#      :ensure t)
# #+end_src

** Org Journal

# #+BEGIN_SRC emacs-lisp
#   (use-package org-journal
#     :bind 
#     ("C-c n j" . org-journal-new-entry)
#     :ensure t
#     :defer t
#     :config
#     (setq org-journal-dir "~/workspace/org/journal")
#     (add-hook 'org-mode-hook 'turn-on-flyspell)
#     (setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
#     (add-to-list 'org-agenda-files org-journal-dir)
#     :custom
#     (org-journal-enable-agenda-integration t)
#     (org-journal-date-prefix "#+TITLE: ")
#     (org-journal-file-format "%Y-%m-%d.org")
#     (org-journal-date-format "%A, %d %B %Y"))
# #+END_SRC 

** Org download

# #+BEGIN_SRC emacs-lisp
#   (use-package org-download
#     :after org
#     :bind
#     (:map org-mode-map
#           (("s-Y" . org-download-screenshot)
#            ("s-y" . org-download-yank))))
# #+END_SRC 

** Org Present

# #+BEGIN_SRC emacs-lisp
#   (autoload 'org-present "org-present" nil t)

#   (eval-after-load "org-present"
#     '(progn
#        (add-hook 'org-present-mode-hook
#                  (lambda ()
#                    (org-present-big)
#                    (org-display-inline-images)
#                    (org-present-hide-cursor)
#                    (org-present-read-only)))
#        (add-hook 'org-present-mode-quit-hook
#                  (lambda ()
#                    (org-present-small)
#                    (org-remove-inline-images)
#                    (org-present-show-cursor)
#                    (org-present-read-write)))))
#  #+END_SRC 

** Org reveal 

# #+begin_src emacs-lisp
# (use-package ox-reveal
# :ensure ox-reveal)

# (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
# (setq org-reveal-mathjax t)

# (use-package htmlize
# :ensure t)
# #+end_src

** Clocking time

#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-log-done 'time)
#+END_SRC

** Calfw

 # #+BEGIN_SRC emacs-lisp
 #   (use-package calfw
 #   :ensure t)
 #   (use-package calfw-org
 #   :ensure t)
 #   (global-set-key [f2] 'cfw:open-org-calendar)
 # #+END_SRC 

** Org EDNA

# #+BEGIN_SRC emacs-lisp
#   (use-package org-edna
#     :ensure t)
# #+END_SRC 


** Xournal and Krita

# #+BEGIN_SRC emacs-lisp
#   (use-package quelpa
#     :ensure t)
#   (use-package org-krita
#     :ensure t
#     :quelpa (org-krita :fetcher github :repo "lepisma/org-krita" :files ("*.el" "resources"))
#     :config (add-hook 'org-mode-hook org-krita-mode))
#   (use-package org-xournalpp
#     :quelpa (org-xournalpp :fetcher gitlab :repo "vherrmann/org-xournalpp" :files ("*.el" "resources"))
#     :hook (org-mode . org-xournalpp-mode))
#   #+END_SRC
