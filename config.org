#+TITLE: Emacs Configuration
#+AUTHOR: Flávio L. C. de Moura
#+EMAIL: flavio@flaviomoura.info
#+DATE: [2018-03-30 Sex 20:44]
#+last_modified: [2022-11-21 seg 15:37]

This is my emacs configuration. Adapted from https://github.com/jamiecollinson/dotfiles

* Setup

** Personal data

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Flávio L. C. de Moura")
  (setq user-mail-address "contato@flaviomoura.mat.br")
#+END_SRC 

** Try
   
   # #+begin_src emacs-lisp
   # (use-package try
   # :ensure t)
   # #+end_src
   
** Theme

Tema padrão

  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package vscode-dark-plus-theme
:ensure t
:config
(load-theme 'vscode-dark-plus t))

(use-package modus-vivendi-theme
:ensure t
:config
(load-theme 'modus-vivendi))

(use-package modus-operandi-theme
:ensure t
:config
(load-theme 'modus-operandi t))

** Auto fill mode

 #+BEGIN_SRC emacs-lisp
   (auto-fill-mode)
 #+END_SRC 

** bbdb

 #+BEGIN_SRC emacs-lisp
 (use-package bbdb
 :ensure t
 :config
   (setq bbdb-file "~/Dropbox/bbdb"))
 #+END_SRC 
 
** Grammarly

#+begin_src emacs-lisp
  (use-package grammarly
    :ensure t
    :config
    (setq grammarly-username "contato@flaviomoura.mat.br")
    (setq grammarly-password "De045kruvmej!")) 
#+end_src

** flycheck-grammarly

#+begin_src emacs-lisp
  (use-package flycheck-grammarly
    :ensure t
    :config
    (with-eval-after-load 'flycheck
     (flycheck-grammarly-setup)))
#+end_src

** Flyspell 

 #+BEGIN_SRC emacs-lisp
   (setq ispell-program-name "/usr/bin/aspell")
   (setq ispell-dictionary "pt_BR")
   (setq flyspell--default-dictionary "pt_BR")
   (setq ispell-list-command "--list")
   (add-hook 'org-mode-hook 'turn-on-flyspell)
   (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
   (autoload 'flyspell-delay-command "flyspell" "Delay on command." t) 
   (autoload 'tex-mode-flyspell-verify "flyspell" "" t)
 #+END_SRC 

 If you encounter the performance issue, try raise flycheck-grammarly-check-time higher. The request will be send by this time everytime the buffer has changed.

(setq flycheck-grammarly-check-time 0.8)

** Command log mode

#+begin_src emacs-lisp
  (use-package command-log-mode
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'command-log-mode))
#+end_src

** Dired

 # #+BEGIN_SRC emacs-lisp
 #   (use-package dired
 #     :ensure t
 #     :config 
 #     (eval-after-load "dired"
 #       '(progn
 #          (define-key dired-mode-map (kbd "z")
 #            (lambda () (interactive)
 #              (let ((fn (dired-get-file-for-visit)))
 #                (start-process "default-app" nil "open" fn)))))))
 # #+END_SRC 

** scimax

Trying scimax

# #+BEGIN_SRC emacs-lisp
# (load "~/workspace-git/scimax/init.el")
# #+END_SRC 

** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))
  (use-package ivy-bibtex
    :ensure t)
#+END_SRC

** Counsel

verificar lentidão

 # #+BEGIN_SRC emacs-lisp
 # (use-package counsel
 # :ensure t)
 # #+END_SRC
 
** Doom modeline

Possivelmente está deixando o emacs lento

# #+BEGIN_SRC emacs-lisp
# (use-package doom-modeline
# :ensure t
# :hook (after-init . doom-modeline-mode))
# #+END_SRC

** simple-httpd

 #+BEGIN_SRC emacs-lisp
 (use-package simple-httpd
 :ensure t)
 #+END_SRC 

/* Preferences

 As of Emacs 26.1 (C-h N : view-emacs-news shows the recent changes), the default-major-mode variable was removed. This variable occurs in 2 places in emacs/emacs-src/pvs-ilisp.el. Because of this, PVS displays the following error

 error in process filter: Symbol's value as variable is void: default-major-mode

 To fix this error, add

 #+BEGIN_SRC emacs-lisp
   (defvar default-major-mode nil)
 #+END_SRC 

 Smooth scroll and keep cursor at same position when scrolling

 #+BEGIN_SRC emacs-lisp
   (setq scroll-step 1)
   (setq scroll-preserve-screen-position 1)
 #+END_SRC 

 Increase and decrease font size

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-=") 'text-scale-increase)
   (global-set-key (kbd "M--") 'text-scale-decrease)
 #+END_SRC 

 Don't display the help screen on startup.

 #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
 #+END_SRC 

 On  I use ⌘ as =meta= and prefer ⌥ to do nothing so I can still insert special characters like easily.

 #+BEGIN_SRC emacs-lisp
   (setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'super)
 #+END_SRC 

    (setq mac-command-modifier 'meta
         mac-option-modifier 'none)

 I prefer lines to wrap.

 #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
 #+END_SRC 

 Let's turn off unwanted window decoration.

 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (menu-bar-mode -1)
 #+END_SRC 

 I don't want the error bell.

 #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
 #+END_SRC 

 Start maximized

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
 #+END_SRC

 Show parentheses matching

 #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
 #+END_SRC 

 Highlight current line

 #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode 1)
   (global-set-key (kbd "C-c h") 'global-hl-line-mode)
 #+END_SRC 

 Expand parentheses for me.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'electric-pair-mode)
 #+END_SRC 

* Coding

** Agda

#+begin_src emacs-lisp
  (load-file (let ((coding-system-for-read 'utf-8))
               (shell-command-to-string "agda-mode locate")))
  (add-to-list 'auto-mode-alist '("\\.lagda.md\\'" . agda2-mode))
  (add-to-list 'auto-mode-alist '("\\.lagda.tex\\'" . agda2-mode))
#+end_src

** Python
#+begin_src emacs-lisp
    (setq org-babel-python-command "python3")
    (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (ocaml . t)))
#+end_src

** Ocaml tuareg
#+begin_src emacs-lisp
  (use-package tuareg
    :ensure t)
#+end_src

** Programming specific interface improvements

 When programming I like my editor to try to help me with keeping parentheses balanced.

 # #+BEGIN_SRC emacs-lisp
 #   (use-package smartparens
 #     :ensure t
 #     :diminish smartparens-mode
 #     :config
 #     (add-hook 'prog-mode-hook 'smartparens-mode))
 # #+END_SRC 

** Git

 Magit is an awesome interface to git. Summon it with `C-x g`.

 #+BEGIN_SRC emacs-lisp
               (use-package magit
                 :ensure t
                 :bind ("C-x g" . magit-status)
                 :config
                 (setq magit-repository-directories '(("~/.emacs.d" . 0)
                                                      ("~/workspace/" . 2))))

               (use-package forge
                 :ensure t)
 #+END_SRC 

 Display line changes in gutter based on git history. Enable it everywhere.

 #+BEGIN_SRC emacs-lisp
   (use-package git-gutter
     :ensure t
     :config
     (global-git-gutter-mode 't)
     :diminish git-gutter-mode)
 #+END_SRC 

 TimeMachine lets us step through the history of a file as recorded in git.

 #+BEGIN_SRC emacs-lisp
   (use-package git-timemachine
     :ensure t)
 #+END_SRC 

** Coq

Open .v files with Proof General's Coq mode

#+BEGIN_SRC emacs-lisp
  (use-package proof-general
    :ensure t
    :config
    (eval-after-load "proof-script" '(progn
                                       (define-key proof-mode-map [(C-down)] 
                                         'proof-assert-next-command-interactive)
                                       (define-key proof-mode-map [(C-up)] 
                                         'proof-undo-last-successful-command))))
  (setq pg-hide-all-proofs t)
  (setq proof-electric-terminator-enable t)
  (setq proof-three-window-mode-policy 'hybrid)
#+END_SRC 

# #+BEGIN_SRC emacs-lisp
#   (use-package company-coq
#       :ensure t
#       :hook (coq-mode . company-coq-mode))
# #+END_SRC 

** C

Emacs has a great built in C/C++ mode, but we can improve on it with =irony-mode= for code completion via =libclang=.

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :hook (c-mode . irony-mode))
#+END_SRC 

Add company mode support.

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC 

Add flycheck support.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC 

** Ido

 # #+BEGIN_SRC emacs-lisp
 #   (use-package ido
 #     :ensure t
 #     :config
 #     (setq ido-enable-flex-matching t)
 #     (setq ido-everywhere t)
 #     (ido-mode t)
 #     (setq ido-use-filename-at-point 'guess)
 #     (setq ido-create-new-buffer 'always)
 #     (setq ido-file-extensions-order '(".org" ".tex" ".pdf")))
 #    #+END_SRC 

* Extras
** Pdf tools

# #+BEGIN_SRC emacs-lisp
#    (use-package pdf-tools
#     :ensure t
#     :config
#     (pdf-tools-install))
# #+END_SRC

** Ace window

   #+begin_src emacs-lisp
   (use-package ace-window
   :ensure t
   :init
   (global-set-key [remap other-window] 'ace-window))
   #+end_src

** LaTeX classes

 #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'ox-latex
         (add-to-list 'org-latex-classes
                      '("entcs"
                        "\\documentclass[9pt]{entcs}"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
         (add-to-list 'org-latex-classes
                   '("myreport"
                     "\\documentclass[11pt]{report}"
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC 

** AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-PDF-mode t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)

  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
	'(("PDF Viewer" "okular --unique %o#src:%n%b")))

  (custom-set-variables
   '(TeX-source-correlate-method 'synctex)
   '(TeX-source-correlate-mode t)
   '(TeX-source-correlate-start-server t))
 #+END_SRC

 
  (require 'auctex-latexmk)
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  (setq TeX-file-line-error nil)

        
** BibTeX

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :ensure nil
  :config
  (progn
    (setq bibtex-dialect 'biblatex
          bibtex-align-at-equal-sign t
          bibtex-text-indentation 20
          bibtex-completion-bibliography '("~/workspace/org/zotLib.bib"))))
#+END_SRC 

** RefTeX

# #+BEGIN_SRC emacs-lisp
#   (use-package reftex
#     :ensure t
#     :config
#     (setq reftex-plug-into-AUCTeX t)
#     (setq reftex-use-fonts t)
#     (setq reftex-toc-split-windows-fraction 0.2)
#     (setq reftex-default-bibliography '("~/workspace/org/zotLib.bib"))
#     (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
# #+END_SRC 

* Org
** General settings.

I should comment more on these ...

#+BEGIN_SRC emacs-lisp
    (defun zp/org-find-time-file-property (property &optional anywhere)
      "Return the position of the time file PROPERTY if it exists.
        When ANYWHERE is non-nil, search beyond the preamble."
      (save-excursion
        (goto-char (point-min))
        (let ((first-heading
               (save-excursion
                 (re-search-forward org-outline-regexp-bol nil t))))
          (when (re-search-forward (format "^#\\+%s:" property)
                                   (if anywhere nil first-heading)
                                   t)
            (point)))))

    (defun zp/org-has-time-file-property-p (property &optional anywhere)
      "Return the position of time file PROPERTY if it is defined.
        As a special case, return -1 if the time file PROPERTY exists but
        is not defined."
      (when-let ((pos (zp/org-find-time-file-property property anywhere)))
        (save-excursion
          (goto-char pos)
          (if (and (looking-at-p " ")
                   (progn (forward-char)
                          (org-at-timestamp-p 'lax)))
              pos
            -1))))

    (defun zp/org-set-time-file-property (property &optional anywhere pos)
      "Set the time file PROPERTY in the preamble.
        When ANYWHERE is non-nil, search beyond the preamble.
        If the position of the file PROPERTY has already been computed,
        it can be passed in POS."
      (when-let ((pos (or pos
                          (zp/org-find-time-file-property property))))
        (save-excursion
          (goto-char pos)
          (if (looking-at-p " ")
              (forward-char)
            (insert " "))
          (delete-region (point) (line-end-position))
          (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
            (insert now)))))

    (defun zp/org-set-last-modified ()
      "Update the LAST_MODIFIED file property in the preamble."
      (when (derived-mode-p 'org-mode)
        (zp/org-set-time-file-property "LAST_MODIFIED")))

    (add-hook 'before-save-hook #'zp/org-set-last-modified)

    (package-install 'htmlize)
  (setq org-html-htmlize-output-type 'css)
  (setq org-latex-pdf-process 
        '("%latex --synctex=1 -interaction nonstopmode -output-directory %o %f" 
          "%bibtex %b"
          "%latex --synctex=1 -interaction nonstopmode -output-directory %o %f"
          "makeindex -o %b.ind %b.idx"
          "%latex --synctex=1 -interaction nonstopmode -output-directory %o %f"    
          "%latex --synctex=1 -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-packages-alist '(("" "algorithmicx" t)
                                   ( "" "mathpartir" t)))
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . system)
                        ("\\.dvi\\'" . system)
                        ("\\.pdf\\'" . "/usr/bin/okular %s")))
  (setq org-startup-indented 'f)
  (setq org-startup-folded t)
  (setq org-return-follows-link  t)
  (setq org-directory "~/workspace/org/")
  (setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "notes.org"))
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-deadline-warning-days 90)
  (setq org-agenda-files (directory-files-recursively "~/workspace" "\\.org$"))
  (setq org-agenda-show-all-dates t)
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-start-with-clockreport-mode t)
  (setq org-agenda-arquives-mode t)
  (setq org-todo-keywords
        '((type "TODO(t)" "PROGRESS(s@/!)" "WAITING(w@/!)" "READING(r)" "NEXT(n)" "|" "CANCELLED(c)" "DONE(d)" "READ(e)")))
  (setq org-agenda-custom-commands 
        '(("o" "No trabalho" tags-todo "@unb"
           ((org-agenda-overriding-header "UnB")))
          ("h" "Em casa" tags-todo "@casa"
           ((org-agenda-overriding-header "Casa")))))
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "C-c l") 'org-store-link)

  (require 'ox-publish)
  (setq org-html-validation-link nil
        org-html-head-include-scripts nil
        org-html-head-include-default-style nil
        org-html-head "<link rel=\"stylesheet\" href=\"files/mystyle3.css\" />")
  (setq org-publish-project-alist
        '(("lc1"
           :base-directory "~/workspace/LC1-github"
           :base-extension "org"
           :publishing-directory "~/workspace/flaviodemoura.github.io/public/"
           :publishing-function org-html-publish-to-html
           :headline-levels 3
           :section-numbers nil
           :with-toc nil
           :html-head "<link rel="stylesheet" type="text/css" href="files/site.css"/>"
           :html-preamble t)

            ("paa"
             :base-directory "~/workspace/PAA-github"
             :base-extension "org"
             :publishing-directory "~/workspace/flaviodemoura.github.io/public/"
             :publishing-function org-html-publish-to-html
             :headline-levels 3
             :section-numbers nil
             :with-toc nil
             :html-head "<link rel="stylesheet" type="text/css" href="files/site.css"/>"
             :html-preamble t)

            ("webpage"
             :recursive t
             :base-directory "~/workspace/flaviodemoura.github.io/content/"
             :publishing-directory "~/workspace/flaviodemoura.github.io/public/"
             :publishing-function 'org-html-publish-to-html
             :with-author nil
             :with-creator nil
             :with-toc nil
             :section-numbers nil
             :time-stamp-file nil)

            ("images"
             :base-directory "~/workspace/org/jpeg/"
             :base-extension "jpg\\|gif\\|png"
             :publishing-directory "~/workspace/flaviodemoura.github.io/public/files"
             :publishing-function org-publish-attachment)

            ("ensino" :components ("webpage" "lc1" "paa" ))))
#+END_SRC 

  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . system)
                        ("\\.dvi\\'" . system)
                        ("\\.pdf\\'" . "/usr/bin/okular %s")))

(setq org-agenda-files (directory-files-recursively "~/workspace/" "\\.org$"))

(setq org-latex-pdf-process (list "latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o %f"))          

;; From https://stackoverflow.com/questions/22394394/orgmode-a-report-of-tasks-that-are-done-within-the-week
;; define "R" as the prefix key for reviewing what happened in various time periods
(add-to-list 'org-agenda-custom-commands
             '("R" . "Review" )
             )

;; Common settings for all reviews
(setq efs/org-agenda-review-settings
'(org-agenda-files (directory-files-recursively "~/workspace/" "\\.org$")
(org-agenda-show-all-dates t)
        (org-agenda-start-with-log-mode t)
        (org-agenda-start-with-clockreport-mode t)
        (org-agenda-archives-mode t)
        ;; I don't care if an entry was archived
        (org-agenda-hide-tags-regexp
         (concat org-agenda-hide-tags-regexp
                 "\\|ARCHIVE"))
      ))
;; Show the agenda with the log turn on, the clock table show and
;; archived entries shown.  These commands are all the same exept for
;; the time period.
(add-to-list 'org-agenda-custom-commands
             `("Rw" "Week in review"
                agenda ""
                ;; agenda settings
                ,(append
                  efs/org-agenda-review-settings
                  '((org-agenda-span 'week)
                    (org-agenda-start-on-weekday 0)
                    (org-agenda-overriding-header "Week in Review"))
                  )
                ("~/workspace/org/review/week.html")
                ))


(add-to-list 'org-agenda-custom-commands
             `("Rd" "Day in review"
                agenda ""
                ;; agenda settings
                ,(append
                  efs/org-agenda-review-settings
                  '((org-agenda-span 'day)
                    (org-agenda-overriding-header "Day in Review"))
                  )
                ("~/workspace/org/review/day.html")
                ))

(add-to-list 'org-agenda-custom-commands
             `("Rm" "Month in review"
                agenda ""
                ;; agenda settings
                ,(append
                  efs/org-agenda-review-settings
                  '((org-agenda-span 'month)
                    (org-agenda-start-day "01")
                    (org-read-date-prefer-future nil)
                    (org-agenda-overriding-header "Month in Review"))
                  )
                ("~/workspace/org/review/month.html")
                ))

** Orgit

#+begin_src emacs-lisp
(use-package orgit
:ensure t)
#+end_src

** OrgRef v3

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)

      (setq bibtex-completion-bibliography '("~/workspace/org/zotLib.bib")
            bibtex-completion-library-path '("~/pCloudDrive/pdfs/")
            bibtex-completion-notes-path "~/pCloudDrive/pdfs-notes/"
            bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

            bibtex-completion-additional-search-fields '(keywords)
            bibtex-completion-display-formats
            '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
              (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
              (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
              (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
              (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
            bibtex-completion-pdf-open-function
            (lambda (fpath)
              (call-process "open" nil 0 nil fpath)))

      (require 'bibtex)

      (setq bibtex-autokey-year-length 4
            bibtex-autokey-name-year-separator "-"
            bibtex-autokey-year-title-separator "-"
            bibtex-autokey-titleword-separator "-"
            bibtex-autokey-titlewords 2
            bibtex-autokey-titlewords-stretch 1
            bibtex-autokey-titleword-length 5
            org-ref-bibtex-hydra-key-binding (kbd "H-b"))

      (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)

  (require 'org-ref-ivy)

    (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
          org-ref-insert-cite-function 'org-ref-cite-insert-ivy
          org-ref-insert-label-function 'org-ref-insert-label-link
          org-ref-insert-ref-function 'org-ref-insert-ref-link
          org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)

    (require 'org-ref-arxiv)
    (require 'org-ref-scopus)
    (require 'org-ref-wos)
#+END_SRC

  (use-package org-ref
    :ensure t
    :init
    (require 'bibtex)

    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "-"
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 2
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5
          org-ref-bibtex-hydra-key-binding (kbd "H-b"))

    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
    (setq bibtex-completion-bibliography '("~/pCloudDrive/orgroam/references.bib"
                                           "~/workspace/org/zotLib.bib")
          bibtex-completion-library-path '("~/pCloudDrive/pdfs/")
          bibtex-completion-notes-path "~/pCloudDrive/pdfs-notes/"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath)))

  old config

    (require 'org-ref-ivy)
    (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

:config
    (setq reftex-default-bibliography '("~/workspace/org/zotLib.bib")
          org-ref-default-bibliography '("~/workspace/org/zotLib.bib")
          org-ref-bibliography-notes "~/workspace/org/notes.org"
          org-ref-pdf-directory "~/pCloudDrive/pdfs/")
    (setq bibtex-completion-bibliography "~/workspace/org/zotLib.bib"
          bibtex-completion-library-path "~/pCloudDrive/pdfs"
          bibtex-completion-notes-path "~/workspace/org/")
    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (start-process "open" "*open*" "open" fpath)))

              
** Org Roam

# #+BEGIN_SRC emacs-lisp
#   (use-package org-roam
#     :ensure t
#     :init
#     (setq org-roam-v2-ack t)
#     :hook
#     ((after-init . org-roam-mode)
#      (before-save . zp/org-set-last-modified))
#     :custom
#     (org-roam-directory "~/pCloudDrive/orgroam")
#     (org-roam-dailies-directory "journal/")
#     (org-roam-completion-everywhere t)
#     :bind (("C-c n l" . org-roam-buffer-toggle)
#            ("C-c n f" . org-roam-node-find)
#            ("C-c n i" . org-roam-node-insert)
#            :map org-mode-map
#            ("C-M-i" . completion-at-point)
#            :map org-roam-dailies-map
#            ("Y" . org-roam-dailies-capture-yesterday)
#            ("T" . org-roam-dailies-capture-tomorrow))
#     :bind-keymap
#     ("C-c n d" . org-roam-dailies-map)
#     :config
#     (require 'org-roam-dailies)
#     (org-roam-db-autosync-mode))
# #+END_SRC

Old config:

    (use-package org-roam
      :ensure t
      :hook
      ((after-init . org-roam-mode)
       (before-save . zp/org-set-last-modified))
      :custom
      (org-roam-directory "~/workspace/org")
      :bind (:map org-roam-mode-map
                  (("C-c n l" . org-roam)
                   ("C-c n f" . org-roam-find-file)
                   ("C-c n j" . org-roam-jump-to-index)
                   ("C-c n b" . org-roam-switch-to-buffer)
                   ("C-c n g" . org-roam-graph))
                  :map org-mode-map
                  (("C-c n i" . org-roam-insert))))

    (setq org-roam-index-file "inicial.org")
    (add-hook 'after-init-hook 'org-roam-mode)
    (setq org-roam-graph-viewer "/usr/bin/open")
    (setq org-roam-capture-templates
          '(("d" "default" plain (function org-roam--capture-get-point)
             "%?"
             :file-name "%<%Y%m%d%H%M%S>-${slug}"
             :head "#+TITLE: ${title}\n \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags ::  "
             :unnarrowed t)))
            
** Org Roam Bibtex
  
# #+BEGIN_SRC emacs-lisp
#   (use-package org-roam-bibtex
#     :ensure t
#     :after org-roam
#     :hook (org-roam-mode . org-roam-bibtex-mode)
#     :bind (:map org-mode-map
#                 (("C-c n a" . orb-note-actions))))
# #+END_SRC 

** Org Noter

# #+begin_src emacs-lisp
#    (use-package org-noter
#      :ensure t)
# #+end_src

** Org Journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :bind 
    ("C-c n j" . org-journal-new-entry)
    :ensure t
    :defer t
    :config
    (setq org-journal-dir "~/workspace/org/journal")
    (add-hook 'org-mode-hook 'turn-on-flyspell)
    (setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
    (add-to-list 'org-agenda-files org-journal-dir)
    :custom
    (org-journal-enable-agenda-integration t)
    (org-journal-date-prefix "#+TITLE: ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC 

** Org download

# #+BEGIN_SRC emacs-lisp
#   (use-package org-download
#     :after org
#     :bind
#     (:map org-mode-map
#           (("s-Y" . org-download-screenshot)
#            ("s-y" . org-download-yank))))
# #+END_SRC 

** Org tree slide

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :custom
    (org-image-actual-width nil))
  (global-set-key (kbd "<f12>") 'org-tree-slide-mode)
  (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
  (with-eval-after-load "org-tree-slide"
    (define-key org-tree-slide-mode-map (kbd "<C-left>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<C-right>") 'org-tree-slide-move-next-tree))
#+end_src

** Org Present

# #+BEGIN_SRC emacs-lisp
#   (autoload 'org-present "org-present" nil t)

#   (eval-after-load "org-present"
#     '(progn
#        (add-hook 'org-present-mode-hook
#                  (lambda ()
#                    (org-present-big)
#                    (org-display-inline-images)
#                    (org-present-hide-cursor)
#                    (org-present-read-only)))
#        (add-hook 'org-present-mode-quit-hook
#                  (lambda ()
#                    (org-present-small)
#                    (org-remove-inline-images)
#                    (org-present-show-cursor)
#                    (org-present-read-write)))))
#  #+END_SRC 

** Org reveal 

# #+begin_src emacs-lisp
# (use-package ox-reveal
# :ensure ox-reveal)

# (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
# (setq org-reveal-mathjax t)

# (use-package htmlize
# :ensure t)
# #+end_src

** Clocking time

#+BEGIN_SRC emacs-lisp
 (setq org-clock-persist 'history)
 (org-clock-persistence-insinuate)
 (setq org-log-done 'time)
#+END_SRC

** Calfw

 # #+BEGIN_SRC emacs-lisp
 #   (use-package calfw
 #   :ensure t)
 #   (use-package calfw-org
 #   :ensure t)
 #   (global-set-key [f2] 'cfw:open-org-calendar)
 # #+END_SRC 

** Org EDNA
   
# #+BEGIN_SRC emacs-lisp
#   (use-package org-edna
#     :ensure t)
# #+END_SRC 

** Xournal and Krita

#+BEGIN_SRC emacs-lisp
  (use-package org-xournalpp
    :ensure t
    :quelpa (org-xournalpp :fetcher gitlab :repo "vherrmann/org-xournalpp" :files ("*.el" "resources"))
    :config
    (add-hook 'org-mode-hook 'org-xournalpp-mode))
  #+END_SRC

    (use-package org-krita
    :ensure t
    :quelpa (org-krita :fetcher github :repo "lepisma/org-krita" :files ("*.el" "resources"))
    :config (add-hook 'org-mode-hook org-krita-mode))
